/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package src;

import java.io.File;
import java.io.PrintWriter;
import java.io.FileReader;
import java.io.BufferedReader;
import java.io.IOException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Scott
 */
public class FinderFrame extends javax.swing.JFrame {

    private File inputFile;
    private File fileDir;
    private File wordlistDir;
    private File outputFile;
    private String customWordList;
    private boolean other;
    
    private final String configFilename;
    /**
     * Creates new form FinderFrame
     */
    public FinderFrame() {
        initComponents();
        configFilename = "WordFinder.config";
        other=false;
        copyright.setText("\u00A9 2022 by Scott Byrne");
        try{
            BufferedReader br = new BufferedReader(new FileReader(configFilename));
            String line = br.readLine();
            if (line != null){
                fileDir=new File(line);
                line = br.readLine();
                if(line != null){
                    wordlistDir = new File(line);
                }
                return;
            }
        }catch(IOException e){
            System.err.println("IOException while trying to read default dir. Continuing...");
        }
        fileDir=new File(System.getProperty("user.home"));
        wordlistDir = new File(System.getProperty("user.home"));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        selector = new javax.swing.ButtonGroup();
        listOptions = new javax.swing.ButtonGroup();
        selectFile = new javax.swing.JButton();
        inputFileText = new javax.swing.JLabel();
        introText = new javax.swing.JLabel();
        highlight = new javax.swing.JButton();
        cancel = new javax.swing.JButton();
        inputFilename = new javax.swing.JLabel();
        hits = new javax.swing.JRadioButton();
        misses = new javax.swing.JRadioButton();
        selectDir = new javax.swing.JButton();
        outputFileText = new javax.swing.JLabel();
        outputFilename = new javax.swing.JLabel();
        copyright = new javax.swing.JLabel();
        Seperator = new LineJPanel();
        instructions = new javax.swing.JLabel();
        shortList = new javax.swing.JRadioButton();
        longList = new javax.swing.JRadioButton();
        customList = new javax.swing.JRadioButton();
        selectList = new javax.swing.JButton();
        wordList = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        selectFile.setText("Select File");
        selectFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectFileActionPerformed(evt);
            }
        });

        inputFileText.setText("Input File:");

        introText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        introText.setText("Select the file to search for words in the Wordlist");

        highlight.setText("Highlight");
        highlight.setEnabled(false);
        highlight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                highlightActionPerformed(evt);
            }
        });

        cancel.setText("Cancel");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        selector.add(hits);
        hits.setSelected(true);
        hits.setText("Highligt hits");

        selector.add(misses);
        misses.setText("Highlight misses");

        selectDir.setText("Browse");
        selectDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectDirActionPerformed(evt);
            }
        });

        outputFileText.setText("Output File:");

        copyright.setText("\\u00A9");

        javax.swing.GroupLayout SeperatorLayout = new javax.swing.GroupLayout(Seperator);
        Seperator.setLayout(SeperatorLayout);
        SeperatorLayout.setHorizontalGroup(
            SeperatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        SeperatorLayout.setVerticalGroup(
            SeperatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );

        instructions.setText("Select your prefered word list.");

        listOptions.add(shortList);
        shortList.setSelected(true);
        shortList.setText("Short Word List");

        listOptions.add(longList);
        longList.setText("Long Word List");

        listOptions.add(customList);
        customList.setText("Other");

        selectList.setText("Select List");
        selectList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectListActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Seperator, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(copyright)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(introText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(inputFileText)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(inputFilename, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(outputFileText)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(outputFilename, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(selectDir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(selectFile, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(hits, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(misses, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(instructions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(longList)
                                    .addComponent(shortList))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(highlight, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(customList)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(wordList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(selectList, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(introText)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputFileText)
                    .addComponent(selectFile)
                    .addComponent(inputFilename))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectDir)
                    .addComponent(outputFileText)
                    .addComponent(outputFilename))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(misses)
                    .addComponent(hits))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Seperator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(instructions)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(shortList)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(longList)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(wordList, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(customList)
                        .addComponent(selectList)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancel)
                    .addComponent(highlight))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(copyright))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private boolean testOther(){
        if(!other){
            other=true;
            return false;
        }else{
            return true;
        }
    }
    
    private void writeConfig(){
        try{
            PrintWriter config = new PrintWriter(configFilename);
            config.println(fileDir);
            config.println(wordlistDir);
            config.close();
        }catch(IOException e){
            System.err.println("Unable to write config file. Continuing");
        }
    }
    
    private void selectFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectFileActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setCurrentDirectory(fileDir);
        fileChooser.setMultiSelectionEnabled(false);
        int returnValue = fileChooser.showOpenDialog(null);
        fileDir=fileChooser.getCurrentDirectory();
        writeConfig();
        if(returnValue == JFileChooser.APPROVE_OPTION){
            inputFile = fileChooser.getSelectedFile();
            inputFilename.setText(inputFile.getName());
            if(testOther()){
                highlight.setEnabled(true);
            }
        }
    }//GEN-LAST:event_selectFileActionPerformed

    private void highlightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_highlightActionPerformed
        String listName;
        if(shortList.isSelected()){
            listName="shortlist.wl";
        }else if(longList.isSelected()){
            listName="longlist.wl";
        }else{
            listName=customWordList;
        }
        WordFinder wf = new WordFinder(listName,inputFile,outputFile);
	try{
            if(hits.isSelected()){
                wf.highlight(true);
            }else{
                wf.highlight(false);
            }
	}catch(IOException e){
            JOptionPane.showMessageDialog(null,"Program failed with an IOException.\n"
                    + "Ensure you selected a valid readable file.","IOException",JOptionPane.ERROR_MESSAGE);
            //System.out.println("Program failed with an IOException.\nEnsure your filenames are correct.\n");
	}
        Object[] options = {"No", "Yes"};
        int result = JOptionPane.showOptionDialog(null, "Words highlighted. Would you like to highlight more files?", "Success!", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[1]);
        if(result==0){
            System.exit(0);
        }
    }//GEN-LAST:event_highlightActionPerformed

    private void selectDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectDirActionPerformed

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.setCurrentDirectory(fileDir);
        
        String fname;
        if(!inputFilename.getText().equals("")){
            Pattern filename = Pattern.compile("([\\w\\s]+)(\\.[\\w]+)?");
            Matcher m = filename.matcher(inputFilename.getText());
            fname=m.replaceAll("$1.html");
        }else{
            fname="output.html";
        }
        
        fileChooser.setSelectedFile(new File(fname));
        
        FileFilter filter = new FileNameExtensionFilter("HTML files", "html");
        fileChooser.addChoosableFileFilter(filter);
                
        int returnValue = fileChooser.showSaveDialog(null);
        fileDir=fileChooser.getCurrentDirectory();
        writeConfig();
        if(returnValue == JFileChooser.APPROVE_OPTION){
            if(fileChooser.getSelectedFile().getName().matches("[\\w\\s]+\\.html")){
                outputFile = fileChooser.getSelectedFile();
                outputFilename.setText(outputFile.getName());
                if(testOther()){
                    highlight.setEnabled(true);
                }
            }else{
                JOptionPane.showMessageDialog(null, "Output file must be an html file.", "Error Invalid File Type", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_selectDirActionPerformed

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        System.exit(0);
    }//GEN-LAST:event_cancelActionPerformed

    private void selectListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectListActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setAcceptAllFileFilterUsed(true);
        fileChooser.setCurrentDirectory(wordlistDir);
        
        FileFilter filter = new FileNameExtensionFilter("Word Lists", "wl");
        fileChooser.addChoosableFileFilter(filter);
                
        int returnValue = fileChooser.showSaveDialog(null);
        wordlistDir=fileChooser.getCurrentDirectory();
        writeConfig();
        if(returnValue == JFileChooser.APPROVE_OPTION){
            customWordList = fileChooser.getSelectedFile().getAbsolutePath();
            wordList.setText(fileChooser.getSelectedFile().getName());
            customList.setSelected(true);
        }
    }//GEN-LAST:event_selectListActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FinderFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FinderFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FinderFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FinderFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FinderFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Seperator;
    private javax.swing.JButton cancel;
    private javax.swing.JLabel copyright;
    private javax.swing.JRadioButton customList;
    private javax.swing.JButton highlight;
    private javax.swing.JRadioButton hits;
    private javax.swing.JLabel inputFileText;
    private javax.swing.JLabel inputFilename;
    private javax.swing.JLabel instructions;
    private javax.swing.JLabel introText;
    private javax.swing.ButtonGroup listOptions;
    private javax.swing.JRadioButton longList;
    private javax.swing.JRadioButton misses;
    private javax.swing.JLabel outputFileText;
    private javax.swing.JLabel outputFilename;
    private javax.swing.JButton selectDir;
    private javax.swing.JButton selectFile;
    private javax.swing.JButton selectList;
    private javax.swing.ButtonGroup selector;
    private javax.swing.JRadioButton shortList;
    private javax.swing.JLabel wordList;
    // End of variables declaration//GEN-END:variables
}
